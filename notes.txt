Structure REACT moderne : React est composé de plusieurs 'composants' dont chacun :: 
import React from 'react'
    REACT :: 1 COMPOPOSANT
    1 COMPOSANT => 1 FONCTION
    FONCTION : RENVOIE TOUJOURS QUELQUE CHOSE (JSX)
export     
----------------------

  Arborescence des composants : react-course
Les fichiers .js commencant par une lettre majuscule, sont des composants 

Dans react :: chaque composant doit avoir une balsie supérieur. 
souvent efectuer par des fragment :: <>

______-----------_________
Quick note for App.js => rsc() 
stand for ReactStateless, permet de créer un modele vide de composant. 

lorem ipsum quick : taper dans un <p> lorem60 </p> ou un autre chiifre  

Structure général dans SRC
App.js
index.js
*components
*pages
*styles

NavLink +/- a href


-----------------------------------------------------
stocker des données :: HOOKS =>

const Countries = () => 
  const [data, setData] = useState("Hello");
  return <div>{data}</div>


  data      => element dans lequel on met nos donnees
  setData   => element par lequel on passe pour actualiser cette donnee 
  useState  => 

--
const Countries = () => {
    const [data, setData] = useState("Hello");

    const sayGoodbye = () => {
        setData("Goodbye");
    }

    return <div>
        {data}
        /*un peu comme un event listener en js */
        <button onClick={sayGoodbye}>Dire au revoir</button>
    </div>;
};


---
logs (console) dans react sont souvent affiche en double



_________________________-------------------------------__________________________
API & axios
 npm i -s axios

useEffect : 
en ajoutant un callback vide [] à la fin du useEffect ::
  }, []); 
ça signifie que le useEffect n'est lu qu'une seule fois
  C-A-D : lorsque le composant est mis en place, tu le li et le joue une fois, puis tu t'arretes.
A MOINS qu'il y est une element dans les crochets [] 
  ex [data], à ce moment là, à chaque fois que la data se mets a jour, 
    tu rejoue/lis le 'useEffect' => boucle infini

Si on mets [data], mais qu'on veut qu'il ne l'effectue qu'une seule fois : :
    const [playOnce, setPlayOnce] = useState(true);
     






------
ne pas mettre d'accolades {} après un data.map 

______////_________////______////_________
return (
    <div className="countries">
        <ul className="countries-list">
/*on peut inclure du JS dans du react ::*/
            {data.map((country) => (
                <li>
                    {country.name}
                </li>
            ))}
        </ul>
    </div>
)
;
______////_________////______////_________
Comment on fait pour passer des donnes a un component (ex. donnees de Card à Countries)
  PROPS :: 
<Card country={country} />
le 'country' de map repond au nom de 'country' dans le component Card 
la valeur a droite transmets sa valeur à gauche

COUNTRIES.JS ::
...
return (
        <div className="countries">
            <ul className="countries-list">
                {data.map((country) => (
                    <Card country={country} />  /*PROPS*/
                ))}
            </ul>
        </div>
    )
    ;

CARD.JS :: 
import React from 'react';

const Card = (props) => {
    return (
        <div>
            Card
        </div>
    );
};

export default Card;

*******
index.js:1 Warning: Each child in a list should have a unique "key" prop.
donc : ...<Card country={country} key={country.name}/>

******************_______________________****************************___
DESTRUCTURING :: 
props.{ce qu'il y a entre crochets}

const Card = (props) => {...
  // destructuring 
  const { country } = props;    ==    const country = props.country;
...


________________________________________________________
Mettre des composants dans des composants :: 

return (
    <li className="card">
        <img src={country.flag} alt="flag" />
        <div className="data-container">
            <ul>
                <li>{country.name}</li>
                <li>{country.capital}</li>
                <li>Pop. {country.population}</li>
            </ul>
        </div>
    </li>
);

-----------------------
x => country.population
const numberFormat = (x) => {
    return x.toString().replace(/\B(?(\d{3})+(?!\d))/g, ",");
}...
  <li>Pop. {numberFormat(country.population)}</li>

________________________________________________________.........
*-*-*-*-*TRIER LA data (Countries.js)
    const Countries = () => {
        const [data, setData] = useState([]);
        const [sortedData, setSortedData] = useState([]);
        const [playOnce, setPlayOnce] = useState(true);
        const [rangeValue, setRangeValue] = useState(40);

    useEffect(() => {
        if (playOnce) {

        axios
            .get(
                'http://restcountries.eu/rest/v2/all?fields=name;population;region;capital;flag'
                )
                .then((res) => {
                    setData(res.data)
                    setPlayOnce(false);
                });
        }

        const sortedCountry = () => {
            const countryObj = Object.keys(data).map((i) => data[i]);
            const sortedArray = countryObj.sort((a,b) => {
                return b.population - a.population
            });
            sortedArray.length = rangeValue;
            setSortedData(sortedArray);
        }
        sortedCountry();
    }, [data, rangeValue, playOnce]);
    
    return (
        <div className="countries">
            <div className="sort-container">
                <input type="range" min="1" max="250" value={rangeValue} 
                onChange={(e) => setRangeValue(e.target.value)}/>
            </div>
            <ul className="countries-list">
                {sortedData.map((country) => (
                    <Card country={country} key={country.name}/>
                ))}
            </ul>
        </div>
    )
    ;
};


*-*-*-*-*-*TRIER selon les continents, avec input radio
    const Countries = () => {
        ...
        const [selectedRadio, setSelectedRadio] = useState('');
        const radios = ['Africa', 'America', 'Asia', 'Europe', 'Oceania']

<div className="countries">
...
    <ul>
                        {radios.map((radio) => { 
                            /* javascript au lieu de html pour une économie de code,
                            changer selectedRadio, au fur et a mesure qu'il est 'check'
                            pour lié l'id et le htmlFor
                            */
                            return (  
                                <li key={radio}>
                                    <input 
                                    type="radio" 
                                    value={radio} 
                                    id={radio} 
                                    checked={radio === selectedRadio} 
                                    onChange={(e) => setSelectedRadio(e.target.value)} 
                                    />
                                    <label htmlFor={radio}>{radio}</label> 
                                </li>
                            );
                        })}                    
    </ul>
...
</div>
    <ul className="countries-list"> {/* pour faire le tri par continents*/}
        {sortedData
        .filter((country) => country.region.includes
        (selectedRadio))
        .map((country) => (
            <Card country={country} key={country.name}/>
        ))}
    </ul>
</div>

*-*-*-*-*Bouttons pour annuler les radios (revenir tout afficher)











